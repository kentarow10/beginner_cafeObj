-- revised simulator of a mutex protocol

mod! GLIST(E :: TRIV) {
    [Nil NnList < List]
    op nil : -> Nil {constr} .
    op _|_ : Elt.E List -> List {constr} .
    op if_then{_}else{_} : Bool List List -> List .
    vars L1 L2 : List .
    eq if true then {L1} else {L2} = L1 .
    eq if false then {L1} else {L2} = L2 .
}

mod* INF-LIST(E :: TRIV) {
    pr(NAT)
    pr(GLIST(E))
    [InfList]
    op _|_ : Elt.E InfList -> InfList {strat: (1 0)} .
    op take : InfList Nat -> List .
    op drop : InfList Nat -> InfList .
    op _@_ : List InfList -> InfList .
    op zip : InfList InfList -> InfList .
    op if_then{_}else{_} : Bool InfList InfList -> InfList .
    vars X Y : Elt.E .
    vars IL IL2 : InfList .
    var NzN : NzNat .
    var N : Nat .
    var L : List .
    eq take(IL,0) = nil .
    eq take(X | IL, NzN) = X | take(IL,p NzN) .
    eq drop(IL,0) = IL .
    eq drop(X | IL, NzN) = drop(IL,p NzN) .
    eq nil @ IL = IL .
    eq (X | L) @ IL = X | (L @ IL) .
    eq zip(X | IL,Y | IL2) = X | Y | zip(IL,IL2) .
    eq if true then {IL} else {IL2} = IL .
    eq if false then {IL} else {IL2} = IL2 .
}

mod! LOC {
    [Loc]
    ops rs cs : -> Loc {constr} .
}

mod! STATE principal-sort State {
    pr(LOC)
    [State]
    op (locked:_,pc1:_,pc2:_) : Bool Loc Loc -> State {constr} .
}

mod! TID {
    [Tid]
    ops t1 t2 : -> Tid {constr} .
    op if_then{_}else{_} : Bool Tid Tid -> Tid .
    vars T1 T2 : Tid .
    eq if true then {T1} else {T2} = T1 .
    eq if false then {T1} else {T2} = T2 .
}

mod! FMUTEX {
    pr(STATE)
    pr(TID)
    op trans : State Tid -> State .
    vars L1 L2 : Loc .
    var B : Bool .
    -- t1
    eq trans((locked: true,pc1: rs,pc2: L2),t1) = (locked: true,pc1: rs,pc2: L2) .
    eq trans((locked: false,pc1: rs,pc2: L2),t1) = (locked: true,pc1: cs,pc2: L2) .
    eq trans((locked: B,pc1: cs,pc2: L2),t1) = (locked: false,pc1: rs,pc2: L2) .
    -- t2
    eq trans((locked: true,pc1: L1,pc2: rs),t2) = (locked: true,pc1: L1,pc2: rs) .
    eq trans((locked: false,pc1: L1,pc2: rs),t2) = (locked: true,pc1: L1,pc2: cs) .
    eq trans((locked: B,pc1: L1,pc2: cs),t2) = (locked: false,pc1: L1,pc2: rs) .
}

mod! COMP {
    pr(INF-LIST(STATE)
    * {sort InfList -> Comp, sort List -> FComp} )
}

mod! NAT-ERR {
    pr(NAT)
    [Nat ErrNat < Nat&Err]
    op errNat : -> ErrNat {constr} .
    op p_ : Zero -> ErrNat .
    op p_ : ErrNat -> ErrNat .
    op p_ : Nat&Err -> Nat&Err .
    op _quo_ : Nat&Err Zero -> ErrNat .
    op _quo_ : Nat&Err ErrNat -> ErrNat .
    op _quo_ : ErrNat Nat&Err -> ErrNat .
    op _quo_ : Nat&Err Nat&Err -> Nat&Err .
    var NE : Nat&Err .
    eq p 0 = errNat .
    eq p errNat = errNat .
    eq NE quo 0 = errNat .
    eq NE quo errNat = errNat .
    eq errNat quo NE = errNat .
}

mod! SCHED {
    pr(NAT)
    pr(INF-LIST(TID) * {sort InfList -> Sched} )
    op sched : Nat -> Sched .
    var N : Nat .
    eq sched(N) = if 2 divides N then {t1 | sched(N quo 2)} else {t2 | sched(N quo 2)} .
}

mod! SIM {
    pr(FMUTEX)
    pr(COMP)
    pr(SCHED)
    op sim : State Nat -> Comp .
    op sub-sim : State Sched -> Comp .
    op mutex : State -> Bool .
    op sim-check : State Nat Nat -> FComp .
    op sub-sim-check : State Sched Nat -> FComp .
    var D : Nat .
    var NzD : NzNat .
    var S : State .
    var N : Nat .
    var T : Tid .
    var TIL : Sched .
    vars L1 L2 : Loc .
    var B : Bool .
    eq sim(S,N) = sub-sim(S,sched(N)) .
    eq sub-sim(S,T | TIL) = S | sub-sim(trans(S,T),TIL) .
    eq mutex((locked: B,pc1: L1,pc2: L2)) = not(L1 == cs and L2 == cs) .
    eq sim-check(S,N,D) = sub-sim-check(S,sched(N),D) .
    eq sub-sim-check(S,T | TIL,0) = S | nil .
    eq sub-sim-check(S,T | TIL,NzD) = if mutex(S) then {S | sub-sim-check(trans(S,T),TIL,p NzD)} else {S | nil} .
}

open SIM .
red take(sim((locked: false,pc1: rs,pc2: rs),123),10) .
red take(sim((locked: false,pc1: rs,pc2: rs),1234),10) .
red take(sim((locked: false,pc1: rs,pc2: rs),12345),10) .
close

open SIM .
red sim-check((locked: false,pc1: rs,pc2: rs),123,10) .
red sim-check((locked: false,pc1: rs,pc2: rs),1234,10) .
red sim-check((locked: false,pc1: rs,pc2: rs),12345,10) .
close


-- simulator of a mutex protocol that can deal with the case in which there are 4 threads

-- revised
mod! STATE principal-sort State {
    pr(LOC)
    [State]
    op (locked:_,pc1:_,pc2:_,pc3:_,pc4:_) : Bool Loc Loc Loc Loc -> State {constr} .
}

-- revised
mod! TID {
    [Tid]
    ops t1 t2 t3 t4 : -> Tid {constr} .
    vars T1 T2 T3 T4 : Tid .
}

-- revised
mod! FMUTEX {
    pr(STATE)
    pr(TID)
    op trans : State Tid -> State .
    vars L1 L2 L3 L4 : Loc .
    var B : Bool .
    -- t1
    eq trans((locked: true,pc1: rs,pc2: L2,pc3: L3,pc4: L4),t1) = (locked: true,pc1: rs,pc2: L2,pc3: L3,pc4: L4) .
    eq trans((locked: false,pc1: rs,pc2: L2,pc3: L3,pc4: L4),t1) = (locked: true,pc1: cs,pc2: L2,pc3: L3,pc4: L4) .
    eq trans((locked: B,pc1: cs,pc2: L2,pc3: L3,pc4: L4),t1) = (locked: false,pc1: rs,pc2: L2,pc3: L3,pc4: L4) .
    -- t2
    eq trans((locked: true,pc1: L1,pc2: rs,pc3: L3,pc4: L4),t2) = (locked: true,pc1: L1,pc2: rs,pc3: L3,pc4: L4) .
    eq trans((locked: false,pc1: L1,pc2: rs,pc3: L3,pc4: L4),t2) = (locked: true,pc1: L1,pc2: cs,pc3: L3,pc4: L4) .
    eq trans((locked: B,pc1: L1,pc2: cs,pc3: L3,pc4: L4),t2) = (locked: false,pc1: L1,pc2: rs,pc3: L3,pc4: L4) .
    -- t3
    eq trans((locked: true,pc1: L1,pc2: L2,pc3: rs,pc4: L4),t3) = (locked: true,pc1: L1,pc2: L2,pc3: rs,pc4: L4) .
    eq trans((locked: false,pc1: L1,pc2: L2,pc3: rs,pc4: L4),t3) = (locked: true,pc1: L1,pc2: L2,pc3: cs,pc4: L4) .
    eq trans((locked: B,pc1: L1,pc2: L2,pc3: cs,pc4: L4),t3) = (locked: false,pc1: L1,pc2: L2,pc3: rs,pc4: L4) .
    -- t4
    eq trans((locked: true,pc1: L1,pc2: L2,pc3: L3,pc4: rs),t4) = (locked: true,pc1: L1,pc2: L2,pc3: L3,pc4: rs) .
    eq trans((locked: false,pc1: L1,pc2: L2,pc3: L3,pc4: rs),t4) = (locked: true,pc1: L1,pc2: L2,pc3: L3,pc4: cs) .
    eq trans((locked: B,pc1: L1,pc2: L2,pc3: L3,pc4: cs),t4) = (locked: false,pc1: L1,pc2: L2,pc3: L3,pc4: rs) .
}

-- スケジュールのアルゴリズムはこれでいいのか？
mod! SCHED {
    pr(NAT)
    pr(INF-LIST(TID) * {sort InfList -> Sched} )
    op sched : Nat -> Sched .
    var N : Nat .
    eq sched(N) = if 4 divides N then {t4 | sched(N quo 4)} else {if 3 divides N then {t3 | sched(N quo 4)} else {if 2 divides N then {t2 | sched(N quo 4)} else {t1 | sched(N quo 4)}}} .
}

mod! COMP {
    pr(INF-LIST(STATE)
    * {sort InfList -> Comp, sort List -> FComp} )
}

mod! SIM {
    pr(FMUTEX)
    pr(COMP)
    pr(SCHED)
    op sim : State Nat -> Comp .
    op sub-sim : State Sched -> Comp .
    op if_then{_}else{_} : Bool Bool Bool -> Bool .
    op check-cs1 : Bool Loc Loc Loc Loc -> Bool .
    op check-cs2 : Bool Loc Loc Loc Loc -> Bool .
    op check-cs3 : Bool Loc Loc Loc Loc -> Bool .
    op mutex : State -> Bool .
    op sim-check : State Nat Nat -> FComp .
    op sub-sim-check : State Sched Nat -> FComp .
    var S : State .
    var N : Nat .
    var NzD : NzNat .
    var T : Tid .
    var TIL : Sched .
    var D : Nat .
    vars L1 L2 L3 L4 : Loc .
    vars LL1 LL2 LL3 LL4 : Loc .
    var B : Bool .
    vars B1 B2 : Bool .
    eq sim(S,N) = sub-sim(S,sched(N)) .
    eq sub-sim(S,T | TIL) = S | sub-sim(trans(S,T),TIL) .
    eq if true then {B1} else {B2} = B1 .
    eq if false then {B1} else {B2} = B2 .
    eq check-cs1(B,LL1,LL2,LL3,LL4) = if LL1 == cs then {check-cs2(true,LL1,LL2,LL3,LL4)} else {check-cs2(false,LL1,LL2,LL3,LL4)} .
    eq check-cs2(false,LL1,LL2,LL3,LL4) = if LL2 == cs then {check-cs3(true,LL1,LL2,LL3,LL4)} else {check-cs3(false,LL1,LL2,LL3,LL4)} .
    eq check-cs2(true,LL1,LL2,LL3,LL4) = if LL2 == cs then {false} else {check-cs3(false,LL1,LL2,LL3,LL4)} .
    eq check-cs3(false,L1,LL2,LL3,LL4) = if LL3 == cs then {not(LL4 == cs)} else {true} .
    eq check-cs3(true,L1,LL2,LL3,LL4) = if LL3 == cs then {false} else {not(LL4 == cs)} .
    eq mutex((locked: B,pc1: L1,pc2: L2,pc3: L3,pc4: L4)) = check-cs1(false,L1,L2,L3,L4) .
    eq sim-check(S,N,D) = sub-sim-check(S,sched(N),D) .
    eq sub-sim-check(S,T | TIL,0) = S | nil .
    -- takeの場合と数を揃えるなら
    -- eq sub-sim-check(S,T | TIL,1) = S | nil .
    eq sub-sim-check(S,T | TIL,NzD) = if mutex(S) then {S | sub-sim-check(trans(S,T),TIL,p NzD)} else {S | nil} .
}

open SIM .
red take(sim((locked: false,pc1: rs,pc2: rs,pc3: rs,pc4: rs),123),10) .
red take(sim((locked: false,pc1: rs,pc2: rs,pc3: rs,pc4: rs),1234),10) .
red take(sim((locked: false,pc1: rs,pc2: rs,pc3: rs,pc4: rs),12345),10) .
close

open SIM .
red sim-check((locked: false,pc1: rs,pc2: rs,pc3: rs,pc4: rs),123,10) .
red sim-check((locked: false,pc1: rs,pc2: rs,pc3: rs,pc4: rs),1234,10) .
red sim-check((locked: false,pc1: rs,pc2: rs,pc3: rs,pc4: rs),12345,10) .
close