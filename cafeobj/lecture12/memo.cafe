mod! LIST1 (E :: TRIV) {
    pr(BOOL)
    [List]
    op nil : -> List {constr}
    op _|_ : Elt.E List -> List {constr} .
    op _@_ : List List -> List .
    op rev1 : List -> List .
    op rev2 : List -> List .
    op sr2 : List List -> List .
    vars L1 L2 L3 : List .
    vars E E2 : Elt.E .
    eq (nil = E | L1) = false .
    eq (E | L1 = E2 | L2) = (E = E2) and (L1 = L2) .
    eq nil @ L2 = L2 .
    eq (E | L1) @ L2 = E | (L1 @ L2) . 
    eq rev1(nil) = nil .
    eq rev1(E | L1) = rev1(L1) @ (E | nil) .
    eq rev2(L1) = sr2(L1,nil) .
    eq sr2(nil,L2) = L2 .
    eq sr2(E | L1,L2) = sr2(L1,E | L2) .
}

open LIST1 .
-- fresh constants
ops l2 l3 : -> List .
-- check
red (nil @ l2) @ l3 = nil @ (l2 @ l3) .
close

open LIST1 .
-- fresh constants
ops l1 l2 l3 : -> List .
op e : -> Elt.E .
-- induction hypothesis
eq (l1 @ L2) @ L3 = l1 @ (L2 @ L3) .
-- check
red ((e | l1) @ l2) @ l3 = (e | l1) @ (l2 @ l3) .
close

mod! LIST2 (E :: TRIV) {
    pr(LIST1(E))
    vars L1 L2 L3 : List .
    vars E E1 E2 : Elt.E .
    op _@_ : List List -> List {assoc} .
}

open LIST2 .
-- fresh constants
op l2 : -> List .
op e2 : -> Elt.E .
-- check
red sr2(nil,e2 | l2) = sr2(nil,nil) @ (e2 | l2) .
close

open LIST2 .
-- fresh constants
ops l1 l2 : -> List .
ops e e2 : -> Elt.E .
-- induction hypothesis
eq sr2(l1,E2 | L2) = sr2(l1,nil) @ (E2 | L2) .
-- check
red sr2(e | l1,e2 | l2) = sr2(e | l1,nil) @ (e2 | l2) .
close

open LIST2 .
-- check
red rev1(nil) = rev2(nil) .
close

open LIST2 .
-- fresh constants
op l1 : -> List .
op e : -> Elt.E .
-- induction hypothesis
eq rev1(l1) = rev2(l1) .
-- lemmas
eq sr2(L1,E2 | L2) = sr2(L1,nil) @ (E2 | L2) .
-- check
red rev1(e | l1) = rev2(e | l1) .
close



mod! LIST3 (E :: TRIV) {
    pr(LIST1(E))
    vars L1 L2 L3 : List .
    vars E E1 E2 : Elt.E .
    op _@_ : List List -> List {assoc} .
    eq L2 @ nil = L2 .
}


open LIST3 .
op l2 : -> List .
-- check
red rev1(nil @ l2) = rev1(l2) @ rev1(nil) .
close

open LIST3 .
-- fresh constants
ops l1 l2 : -> List .
ops e e2 : -> Elt.E .
-- induction hypothesis
eq rev1(L1 @ L2) = rev1(L2) @ rev1(L1) .
-- check
red rev1((e | l1) @ l2) = rev1(l2) @ rev1(e | l1) .
close

open LIST3 .
-- check
red rev1(rev1(nil)) = nil .
close

open LIST3 .
-- fresh constants
ops l1 l2 : -> List .
ops e e2 : -> Elt.E .
-- induction hypothesis
eq rev1(rev1(L1)) = L1 .
-- lemmas
eq rev1(L1 @ L2) = rev1(L2) @ rev1(L1) .
-- check
red rev1(rev1(e | l1)) = e | l1 .
close