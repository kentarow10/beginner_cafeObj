mod! PNAT principal-sort PNat&Err {
    [PZero NzPNat < PNat]
    [PNat ErrPNat < PNat&Err]
    op 0 : -> PZero {constr} .
    op s : PNat -> NzPNat {constr} .
    op errPNat : -> ErrPNat {constr} .
    op if_then{_}else{_} : Bool PNat&Err PNat&Err -> PNat&Err .
    op _<_ : PNat PNat -> Bool .
    op _+_ : PNat PNat -> PNat .
    op _+_ : PNat&Err PNat&Err -> PNat&Err .
    op _*_ : PNat PNat -> PNat .
    op _*_ : PNat&Err PNat&Err -> PNat&Err .
    op sd : PNat PNat -> PNat .
    op sd : PNat&Err PNat&Err -> PNat&Err .
    op _quo_ : PNat PZero -> ErrPNat .
    op _quo_ : PNat NzPNat -> PNat .
    op _quo_ : PNat&Err PNat&Err -> PNat&Err .
    op _rem_ : PNat PZero -> ErrPNat .
    op _rem_ : PNat NzPNat -> PNat .
    op _rem_ : PNat&Err PNat&Err -> PNat&Err .
    -- --
    vars M N : PNat .
    vars ME NE : PNat&Err .
    eq (0 = s(N)) = false .
    eq (s(M) = s(N)) = (M = N) .
    eq (errPNat = N) = false .
    eq (M = M) = true .
    eq if true then {ME} else {NE} = ME .
    eq if false then {ME} else {NE} = NE .
    eq 0 < 0 = false .
    eq 0 < s(N) = true .
    eq s(M) < 0 = false .
    eq s(M) < s(N) = M < N .
    eq 0 + N = N .
    eq s(M) + N = s(M + N) .
    eq ME + errPNat = errPNat .
    eq errPNat + NE = errPNat .
    eq 0 * N = 0 .
    eq s(M) * N = N + (M * N) .
    eq ME * errPNat = errPNat .
    eq errPNat * NE = errPNat .
    eq sd(0,N) = N .
    eq sd(s(M),0) = s(M) .
    eq sd(s(M),s(N)) = sd(M,N) .
    eq sd(ME,errPNat) = errPNat .
    eq sd(errPNat,NE) = errPNat .
    eq M quo 0 = errPNat .
    eq M quo s(N) = if M < s(N) then {0} else {s(sd(M,s(N)) quo s(N))} .
    eq ME quo errPNat = errPNat .
    eq errPNat quo NE = errPNat .
    eq M rem 0 = errPNat .
    eq M rem s(N) = if M < s(N) then {M} else {sd(M,s(N)) rem s(N)} .
    eq ME rem errPNat = errPNat .
    eq errPNat rem NE = errPNat .
}

mod! EXP {
    [ExpPNat < Exp]
    op 0 : -> ExpPNat {constr} .
    op s : ExpPNat -> ExpPNat {constr }
    op _+_ : Exp Exp -> Exp {constr l-assoc prec: 30} .
    op _-_ : Exp Exp -> Exp {constr l-assoc prec: 30} .
    op _*_ : Exp Exp -> Exp {constr l-assoc prec: 29} .
    op _/_ : Exp Exp -> Exp {constr l-assoc prec: 29} .
    op _%_ : Exp Exp -> Exp {constr l-assoc prec: 29} .
}

mod! INTER {
    pr(PNAT)
    pr(EXP)
    op inter : ExpPNat -> PNat .
    op inter : Exp -> PNat&Err .
    var N : PNat . var EN : ExpPNat .
    vars E E1 E2 : Exp .
    eq inter(0) = 0 .
    eq inter(s(EN)) = s(inter(EN)) .
    eq inter(E1 + E2) = inter(E1) + inter(E2) .
    eq inter(E1 - E2) = sd(inter(E1),inter(E2)) .
    eq inter(E1 * E2) = inter(E1) * inter(E2) .
    eq inter(E1 / E2) = inter(E1) quo inter(E2) .
    eq inter(E1 % E2) = inter(E1) rem inter(E2) .
}

mod! INSTR principal-sort Instr {
    pr(PNAT)
    [Instr]
    op push : PNat -> Instr {constr} .
    op add : -> Instr {constr} .
    op minus : -> Instr {constr} .
    op mult : -> Instr {constr} .
    op div : -> Instr {constr} .
    op mod : -> Instr {constr} .
}

mod! LIST (E :: TRIV) {
    [List]
    op nil : -> List {constr}
    op _|_ : Elt.E List -> List {constr} .
    op _@_ : List List -> List {assoc} .
    var E : Elt.E .
    vars L1 L2 : List .
    -- _@_
    eq nil @ L2 = L2 .
    eq (E | L1) @ L2 = E | (L1 @ L2) .
}

mod! ILIST {
    pr(LIST(INSTR)
    * {sort List -> IList})
}

mod! STACK {
    pr(LIST(PNAT)
    * {sort List -> Stack,
    op nil -> empstk})
}

mod! VM {
    pr(ILIST)
    pr(STACK)
    op vm : IList -> PNat&Err .
    op exec : IList Stack -> PNat&Err .
    var IL : IList .
    var PC : PNat .
    var Stk : Stack .
    var N : PNat .
    vars NE NE1 NE2 : PNat&Err .
    eq vm(IL) = exec(IL,empstk) .
    eq exec(nil,empstk) = errPNat .
    eq exec(nil,NE | empstk) = NE .
    eq exec(nil,NE | NE1 | Stk) = errPNat .
    eq exec(push(N) | IL,Stk) = exec(IL,N | Stk) .
    eq exec(add | IL,empstk) = errPNat .
    eq exec(add | IL,NE | empstk) = errPNat .
    eq exec(add | IL,NE2 | NE1 | Stk) = exec(IL,NE1 + NE2 | Stk) .
    eq exec(minus | IL,empstk) = errPNat .
    eq exec(minus | IL,NE | empstk) = errPNat .
    eq exec(minus | IL,NE2 | NE1 | Stk) = exec(IL,sd(NE1,NE2) | Stk) .
    eq exec(mult | IL,empstk) = errPNat .
    eq exec(mult | IL,NE | empstk) = errPNat .
    eq exec(mult | IL,NE2 | NE1 | Stk) = exec(IL,NE1 * NE2 | Stk) .
    eq exec(div | IL,empstk) = errPNat .
    eq exec(div | IL,NE | empstk) = errPNat .
    eq exec(div | IL,NE2 | NE1 | Stk) = exec(IL,NE1 quo NE2 | Stk) .
    eq exec(mod | IL,empstk) = errPNat .
    eq exec(mod | IL,NE | empstk) = errPNat .
    eq exec(mod | IL,NE2 | NE1 | Stk) = exec(IL,NE1 rem NE2 | Stk) .
}

mod! COMP {
    pr(EXP)
    pr(ILIST)
    op comp : Exp -> IList .
    op en2n : ExpPNat -> PNat .
    var EN : ExpPNat .
    vars E E1 E2 : Exp .
    eq comp(EN) = push(en2n(EN)) | nil .
    eq comp(E1 + E2) = comp(E1) @ comp(E2) @ (add | nil) .
    eq comp(E1 - E2) = comp(E1) @ comp(E2) @ (minus | nil) .
    eq comp(E1 * E2) = comp(E1) @ comp(E2) @ (mult | nil) .
    eq comp(E1 / E2) = comp(E1) @ comp(E2) @ (div | nil) .
    eq comp(E1 % E2) = comp(E1) @ comp(E2) @ (mod | nil) .
    eq en2n(0) = 0 .
    eq en2n(s(EN)) = s(en2n(EN)) .
}

mod! VERIFY-COMP {
    pr(INTER)
    pr(VM)
    pr(COMP)
    op th1 : Exp -> Bool .
    op lem1 : ExpPNat -> Bool .
    op lem2 : Exp IList Stack -> Bool .
    var E : Exp .
    var EN : ExpPNat .
    var L : IList .
    var S : Stack .
    eq th1(E) = (inter(E) = vm(comp(E))) .
    eq lem1(EN) = (inter(EN) = vm(comp(EN))) .
    eq lem2(E,L,S) = (exec(comp(E) @ L,S) = exec(L,vm(comp(E)) | S)) .
}

-- Theorem 1 [(relative) correctness of the compiler with respect to the interpreter] 

-- 1 base case

open VERIFY-COMP .
-- fresh constants
op en : -> ExpPNat .
-- lemmas 1
eq inter(EN) = vm(comp(EN)) .
-- check
red th1(en) .
close

-- 2 induction case

open VERIFY-COMP .
-- fresh constants
ops e1 e2 : -> Exp .
-- lemmas 2
eq exec(comp(E) @ L,S) = exec(L,vm(comp(E)) | S) .
-- induction hypothesis
eq inter(e1) = vm(comp(e1)) .
eq inter(e2) = vm(comp(e2)) .
-- check
red th1(e1 + e2) .
close

-- this return "exec(comp(e1),empstk) + exec(comp(e2),empstk) = exec(comp(e1) @ comp(e2) @ add | nil,empstk)"


